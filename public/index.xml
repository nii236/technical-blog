<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Blog</title>
    <link>http://nii236.github.io/technical-blog/</link>
    <description>Recent content on A Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jun 2016 12:52:23 +0800</lastBuildDate>
    <atom:link href="http://nii236.github.io/technical-blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Micro</title>
      <link>http://nii236.github.io/technical-blog/post/2016-06-25-microservice-architecture-thoughts/</link>
      <pubDate>Sat, 25 Jun 2016 12:52:23 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2016-06-25-microservice-architecture-thoughts/</guid>
      <description>

&lt;h1 id=&#34;composing:b1c638b768f0195f806b2c3c62f0a2e4&#34;&gt;Composing&lt;/h1&gt;

&lt;p&gt;So it turns out that some people actually have interest in what I (attempted to) build with regards to the microservice trading platform I mentioned a few posts ago. I ended up doing a screencast to try and explain what I&amp;rsquo;ve done so far with my app and how it all plugs together.&lt;/p&gt;

&lt;p&gt;Thanks to Oren Golan for setting this up! &lt;a href=&#34;https://oren.github.io/blog/micro.html&#34;&gt;The link to the post is here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chord Extensions</title>
      <link>http://nii236.github.io/technical-blog/post/2016-06-16-chordextensions/</link>
      <pubDate>Thu, 16 Jun 2016 16:18:06 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2016-06-16-chordextensions/</guid>
      <description>

&lt;p&gt;This is a summary from the &lt;a href=&#34;www.reddit.com/r/piano&#34;&gt;/r/piano&lt;/a&gt;
 subreddit FAQ. User &lt;code&gt;onaz&lt;/code&gt; gives a great summary on good chord extensions to use.&lt;/p&gt;

&lt;p&gt;I have been playing around with Jazz piano for many years but knowing which extension to use for a chord often eludes me. Turns out there are actually systematic categories for each!&lt;/p&gt;

&lt;p&gt;I will be assuming chords built of the tonic of &lt;code&gt;C&lt;/code&gt; for each chord below. Because I&amp;rsquo;m a nooblet.&lt;/p&gt;

&lt;h1 id=&#34;major7-chords:80205adefefc35a90021eeb8338acf5b&#34;&gt;Major7 chords&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G B
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;suitable-extensions:80205adefefc35a90021eeb8338acf5b&#34;&gt;Suitable extensions&lt;/h2&gt;

&lt;h3 id=&#34;9th:80205adefefc35a90021eeb8338acf5b&#34;&gt;9th&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G B D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a safe note to add for many different voicings&lt;/p&gt;

&lt;h3 id=&#34;11:80205adefefc35a90021eeb8338acf5b&#34;&gt;#11&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G B F#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This comes from the lydian mode. A normal &lt;code&gt;11th&lt;/code&gt; (or &lt;code&gt;4th&lt;/code&gt;) would clash with the major seventh sound as it&amp;rsquo;s an avoid note. However, when we raise the usual note a half-step, we get a very rich &lt;code&gt;#11&lt;/code&gt; sound.&lt;/p&gt;

&lt;h3 id=&#34;13th:80205adefefc35a90021eeb8338acf5b&#34;&gt;13th&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G B A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;13th&lt;/code&gt; (or &lt;code&gt;6th&lt;/code&gt;) won&amp;rsquo;t add very much color to a major seven chord because the function it provides is the same as the normal major seventh. We often talk about how major seven chords (like &lt;code&gt;Cmaj7&lt;/code&gt;) are interchangable with sixth chords (like &lt;code&gt;C6&lt;/code&gt;) because of their function.&lt;/p&gt;

&lt;h2 id=&#34;upper-structure-triads:80205adefefc35a90021eeb8338acf5b&#34;&gt;Upper Structure Triads&lt;/h2&gt;

&lt;p&gt;To get an instant &lt;code&gt;13(#11)&lt;/code&gt; sound on a major chord, add a triad built from a whole step above the root.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;USII - e.g. D major over Cmaj7, resulting in C13♯11&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if we have a &lt;code&gt;Cmaj7&lt;/code&gt; chord&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We go a whole step above the root of the chord (which is a &lt;code&gt;C&lt;/code&gt;). Then we take that note (&lt;code&gt;D&lt;/code&gt;) and build a major triad from there. Now in addition to &lt;code&gt;C E G B&lt;/code&gt;, we are adding &lt;code&gt;D F# A&lt;/code&gt; to get a final chord of &lt;code&gt;C13(#11)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G B D F# A
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;minor-7th-chords:80205adefefc35a90021eeb8338acf5b&#34;&gt;Minor 7th chords&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;suitable-extensions-1:80205adefefc35a90021eeb8338acf5b&#34;&gt;Suitable extensions&lt;/h2&gt;

&lt;h3 id=&#34;9th-1:80205adefefc35a90021eeb8338acf5b&#34;&gt;9th&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C Eb G Bb D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still a safe note to add.&lt;/p&gt;

&lt;h3 id=&#34;11th:80205adefefc35a90021eeb8338acf5b&#34;&gt;11th&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C Eb G Bb F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This comes from the dorian mode and is a great note to add.&lt;/p&gt;

&lt;h3 id=&#34;13th-1:80205adefefc35a90021eeb8338acf5b&#34;&gt;13th&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C Eb G Bb A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A good note to add in minor voicings.&lt;/p&gt;

&lt;h2 id=&#34;upper-structure-triads-1:80205adefefc35a90021eeb8338acf5b&#34;&gt;Upper Structure Triads&lt;/h2&gt;

&lt;p&gt;For minor 7th chords we can use a USii voicing, in this case the Dm. You&amp;rsquo;ll get a Cm13!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;USii - e.g. D minor over Cm7, resulting in Cm13&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C Eb G Bb D F A
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;7th-chords:80205adefefc35a90021eeb8338acf5b&#34;&gt;7th chords&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dominant chords provide the most opportunity for color. They are often used in transition and contain the most dissonance in a chord progression.&lt;/p&gt;

&lt;h2 id=&#34;suitable-extensions-2:80205adefefc35a90021eeb8338acf5b&#34;&gt;Suitable extensions&lt;/h2&gt;

&lt;h3 id=&#34;5-b5:80205adefefc35a90021eeb8338acf5b&#34;&gt;#5/b5&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E Gb Bb
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G# Bb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These usually replace the normal fifth.&lt;/p&gt;

&lt;h3 id=&#34;9:80205adefefc35a90021eeb8338acf5b&#34;&gt;9&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adds more color&lt;/p&gt;

&lt;h3 id=&#34;9-b9:80205adefefc35a90021eeb8338acf5b&#34;&gt;#9/b9&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb Db
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb D#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Altering the nine can give you a ton of color and disonnace very quickly&lt;/p&gt;

&lt;h3 id=&#34;11-1:80205adefefc35a90021eeb8338acf5b&#34;&gt;11&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb F
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This turns the chord into a sus chord. You&amp;rsquo;ll see that written as &lt;code&gt;C7sus&lt;/code&gt;. This is one of the least dissonant alterations you can make.&lt;/p&gt;

&lt;h3 id=&#34;11-2:80205adefefc35a90021eeb8338acf5b&#34;&gt;#11&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb F#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice that &lt;code&gt;#11&lt;/code&gt; and b5 are the same note. &lt;code&gt;#11&lt;/code&gt; is simply another way to think about it.&lt;/p&gt;

&lt;h3 id=&#34;13:80205adefefc35a90021eeb8338acf5b&#34;&gt;13&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;C E G Bb A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adds more colour (and is a standard addition to our four note rootless voicings.)&lt;/p&gt;

&lt;h2 id=&#34;upper-structure-triads-2:80205adefefc35a90021eeb8338acf5b&#34;&gt;Upper Structure Triads&lt;/h2&gt;

&lt;p&gt;The 7th chords are the most flexible here. You can use any of the following triads to alter the chord (from Wikipedia).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;USII - e.g. D major over C7, resulting in C13♯11&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;US♭V - e.g. G♭ major over C7, resulting in C7♭9♯11&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;US♭VI - e.g. A♭ major over C7, resulting in C7♯9♭13&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;USVI - e.g. A major over C7, resulting in C13♭9&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;USi - e.g. C minor over C7, resulting in C7♯9&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;US♭ii - e.g. D♭ minor over C7, resulting in C7♭9 ♭13&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;US♭iii - e.g. E♭ minor over C7, resulting in C7♯9♯11&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;additional-notes:80205adefefc35a90021eeb8338acf5b&#34;&gt;Additional Notes&lt;/h1&gt;

&lt;p&gt;Usually many of these alterations are used together to create a dissonant sound to the liking of the pianist. Often you&amp;rsquo;ll see printed alterations in dominant chords caused by melody notes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Most often you will change combinations of the 5th and 9th to get a sound you like.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elixir</title>
      <link>http://nii236.github.io/technical-blog/post/2016-06-16-elixir/</link>
      <pubDate>Thu, 16 Jun 2016 14:30:07 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2016-06-16-elixir/</guid>
      <description>

&lt;p&gt;All this Gophering around can get boring. That&amp;rsquo;s not a bad thing, I still consider Go the language with which I am strongest and most comfortable. If I had to use a language at my workplace, Go would be it.&lt;/p&gt;

&lt;p&gt;But sometimes you just want to poke around and see what else is out there. A language that offers a sense of adventure instead of the safety of Go and its static types, simplicity, rock solid linting and strict philosophy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;elixir-lang.org&#34;&gt;Elixir&lt;/a&gt; complements Go in this regard. In fact it seems to be the complete opposite. Loosely typed, immutable data structures, enumerators, functional style programming.&lt;/p&gt;

&lt;p&gt;So yeah, apparently functional programming is a cool hip thing to do nowadays. Its a fancy term, it makes you think that functional programming actually works (you know, its &lt;em&gt;FUNCTIONAL&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I play around with linux/unix/osx (hah!) a lot, and the fact that you have a pipeline operator Elixir is amazing! Also map, reduce, filter and each operators are something I miss a lot moving to Go from Ruby, so I&amp;rsquo;m glad to see that it&amp;rsquo;s got the first class treatment here in Elixir.&lt;/p&gt;

&lt;h1 id=&#34;n-ot-i-nvented-h-ere:b9453b1d34ec9f73f05221fbac029349&#34;&gt;N(ot) I(nvented) H(ere)&lt;/h1&gt;

&lt;p&gt;Being in Go land for so long, I had forgotten what the rest of the programming world is like. Gopher&amp;rsquo;s shun extending the language, using dependencies, building packages for others to use.&lt;/p&gt;

&lt;p&gt;Gopher&amp;rsquo;s have a serious case of NIH syndrome, and everything is handrolled to extremes. Its actually quite nice if you think about it. The software you develop ends up fitting like a really, really tight glove.&lt;/p&gt;

&lt;p&gt;It was, however, still an (unexpected) breath of fresh air when I had a look at the Elixir community and how they were enthusiastically talking about writing macros, extending the language, using web frameworks and installing dependencies willy nilly.&lt;/p&gt;

&lt;h1 id=&#34;code:b9453b1d34ec9f73f05221fbac029349&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;So I figured as a raw exercise, to convert one of the easy katas I did long ago. The exercise is called &lt;a href=&#34;https://www.hackerrank.com/challenges/cut-the-sticks&#34;&gt;Cut the Sticks&lt;/a&gt; and is a good exercise in recursion (my Go solution did not, however, use recursion).&lt;/p&gt;

&lt;h2 id=&#34;processing-stdin:b9453b1d34ec9f73f05221fbac029349&#34;&gt;Processing STDIN&lt;/h2&gt;

&lt;p&gt;The hardest part in Go is always processing the arguments that come through HackerRank. Lots of STDIN scanning, processing etc.&lt;/p&gt;

&lt;p&gt;Here is how I processed the STDIN with Go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// GetArgs reads from STDIN and returns stuff in the correct format
func GetArgs(r io.Reader) (int, []int) {
	var numArgs = 0
	_, err := fmt.Fscanln(r, &amp;amp;numArgs)

	if err != nil {
		fmt.Println(err)
	}

	sumArgs := make([]int, numArgs)
	for i := range sumArgs {
		_, err = fmt.Fscan(r, &amp;amp;sumArgs[i])
		if err != nil {
			fmt.Println(err)
		}
	}

	return numArgs, sumArgs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here it is in Elixir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def process(input) do
  values = String.split(input, &amp;quot;\n&amp;quot;)
    |&amp;gt; List.delete_at(0)
    |&amp;gt; List.delete_at(-1)
    |&amp;gt; List.to_string
    |&amp;gt; String.strip
    |&amp;gt; String.split(&amp;quot; &amp;quot;)
    |&amp;gt; Enum.map(&amp;amp;(Integer.parse(&amp;amp;1)))
    |&amp;gt; Enum.map(&amp;amp;(elem(&amp;amp;1,0)))
  recurse_cut(values, Enum.max(values))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe I just suck at Go, but I dunno, there&amp;rsquo;s just something really, really &lt;strong&gt;satisfying&lt;/strong&gt; about the pipeline operator and processing stuff functionally.&lt;/p&gt;

&lt;h2 id=&#34;cutting-the-sticks:b9453b1d34ec9f73f05221fbac029349&#34;&gt;Cutting the sticks&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;actual&lt;/em&gt; code involves chopping off the sticks by the length of the shortest stick until nothing remains.&lt;/p&gt;

&lt;p&gt;UPDATE: I had a look and turns out I wrote the Go code recursively after all!&lt;/p&gt;

&lt;p&gt;Here it is in Go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func cut(numArgs int, args []int, finalArray []int) (int, []int, []int) {

	var newArray []int
	var newFinalArray []int
	var zeroValue bool

	minArg := args[0]

	// Get smallest number in args
	for _, arg := range args {
		if arg &amp;lt; minArg {
			minArg = arg
		}
		if arg == 0 {
			zeroValue = true
		}
	}

	// If non zero, append to resulting array, less the minimum arg
	for _, arg := range args {
		if arg != 0 {
			newArray = append(newArray, arg-minArg)
		}
	}

	// If there exists any zero length sticks, run function again
	if zeroValue {
		return cut(len(newArray), newArray, finalArray)
	}

	// If more than 1 stick remain, run function recursively
	if numArgs &amp;gt; 1 {
		newFinalArray = append(finalArray, len(newArray))
		return cut(len(newArray), newArray, newFinalArray)
	}

	newFinalArray = append(finalArray, len(newArray))
	return len(newArray), newArray, newFinalArray

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here it is in Elixir:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def recurse_cut(values, max) when max &amp;gt; 0 do
    min = values
      |&amp;gt; Enum.filter(&amp;amp;(&amp;amp;1 &amp;gt; 0))
      |&amp;gt; Enum.min
    IO.puts(Enum.count(values, &amp;amp;(&amp;amp;1 &amp;gt;= min)))
    result = Enum.map(values, &amp;amp;(&amp;amp;1-min))
    recurse_cut(result, Enum.max(result))
  end

  def recurse_cut(_values, max) when max &amp;lt;= 0 do
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its so clean!&lt;/p&gt;

&lt;p&gt;As you can see, for programs that require a lot of iteration and mucking about, you might find that a functional style is a lot more efficient, and easier to understand.&lt;/p&gt;

&lt;p&gt;I still believe Go has advantages in tooling, raw speed, simplicity, teams, documentation and a unified community vision. But Elixir offers a great functional style of programming and a sense of adventure that complements it very nicely.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t explored Elixir&amp;rsquo;s metaprogramming, macros or concurrency yet. I will have a look and share my thoughts in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A trading platform in Go</title>
      <link>http://nii236.github.io/technical-blog/post/2016-04-27-microservices/</link>
      <pubDate>Wed, 27 Apr 2016 14:21:40 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2016-04-27-microservices/</guid>
      <description>

&lt;h2 id=&#34;the-language:910a82634b350f883da17b317aecbc6c&#34;&gt;The language&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been obsessing over Go lately. I won&amp;rsquo;t go into it much since pretty much everyone else on the internet has at some point or another. And all of the people I know have probably heard me raving about it. The quality of the language itself remains divisive, but I am going to soldier on and just try and build something.&lt;/p&gt;

&lt;h2 id=&#34;the-project:910a82634b350f883da17b317aecbc6c&#34;&gt;The project&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been looking at playing with &lt;a href=&#34;https://github.com/micro/go-micro&#34;&gt;go-micro&lt;/a&gt; and building microservices. Really, I only needed an excuse to build something. I&amp;rsquo;ve come across some decent trading platforms and frameworks online but nothing really built in Go. So that&amp;rsquo;s my project.&lt;/p&gt;

&lt;p&gt;The first step will be to write a client that subscribes to the Interactive Brokers API and publishes the ticker data onto a &lt;a href=&#34;http://nats.io/&#34;&gt;NATS&lt;/a&gt; message bus, which will then be consumed by &lt;a href=&#34;https://influxdata.com/&#34;&gt;InfluxData&amp;rsquo;s&lt;/a&gt; Telegraf NATS connector. This will give me a bunch of data to play with, with helpful time series crunching tools that come for free with InfluxDB (&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, even an &lt;code&gt;SMA&lt;/code&gt;!).&lt;/p&gt;

&lt;p&gt;Everything will be docker-ised into a swarm. NATS and Influx provide docker containers so that&amp;rsquo;s easy. The single microservices will contain static binaries so (in theory) that will be easy as well.&lt;/p&gt;

&lt;h2 id=&#34;the-snippet:910a82634b350f883da17b317aecbc6c&#34;&gt;The snippet&lt;/h2&gt;

&lt;p&gt;Here is a code snippet that subscribes to the IB API (also docker-ised) and (for now) just logs the values to STDOUT.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func exec(pair string, currency string) {
	log.Infoln(&amp;quot;Starting connection to IB gateway...&amp;quot;, &amp;quot;Pair:&amp;quot;, pair, &amp;quot;, Currency:&amp;quot;, currency)
	options := &amp;amp;ib.EngineOptions{
		Client:           0,
		Gateway:          &amp;quot;192.168.99.100:4003&amp;quot;,
		DumpConversation: false,
	}

	var err error
	e, err = ib.NewEngine(*options)

	defer e.Stop()

	if err != nil {
		log.Fatalln(&amp;quot;ERROR!&amp;quot;, err)
		return
	}
	defer e.Stop()
	log.Infoln(&amp;quot;Done.&amp;quot;)
	log.Infoln(&amp;quot;Setting up contract for subscription...&amp;quot;)
	contract := &amp;amp;ib.Contract{
		Symbol:       pair,
		SecurityType: &amp;quot;CASH&amp;quot;,
		Exchange:     &amp;quot;IDEALPRO&amp;quot;,
		Currency:     currency,
	}

	im, err := ib.NewInstrumentManager(e, *contract)
	defer im.Close()
	ctm, err := ib.NewCurrentTimeManager(e)
	defer ctm.Close()

	if err != nil {
		log.Fatalln(err)
	}

	for {
		select {
		case &amp;lt;-im.Refresh():
			if err := im.FatalError(); err != nil {
				log.Fatalln(err)
			}
			log.Infoln(&amp;quot;Time:&amp;quot;, ctm.Time().UnixNano())
			log.Infoln(&amp;quot;Bid:&amp;quot;, im.Bid())
			log.Infoln(&amp;quot;Ask:&amp;quot;, im.Ask())
			log.Infoln(&amp;quot;Last:&amp;quot;, im.Last())
		}

	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the moment CPU usage jumps up to 50% as soon as you connect to the IB Gateway. No idea why but I&amp;rsquo;m just going to assume its a library issue for the time being.&lt;/p&gt;

&lt;p&gt;The repo can be located on &lt;a href=&#34;https://github.com/nii236/nii-finance&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experiments in learning jazz piano</title>
      <link>http://nii236.github.io/technical-blog/post/2016-02-01-learning-jazz-piano/</link>
      <pubDate>Mon, 01 Feb 2016 10:06:25 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2016-02-01-learning-jazz-piano/</guid>
      <description>

&lt;p&gt;So I have been learning music on and off for years, and have never really gotten to a &lt;strong&gt;fully sick&lt;/strong&gt; level of proficiency. The problem here is usually that I don&amp;rsquo;t put in enough hours, which is true. The other problem is paralysis analysis, and the filthy need to optimise my learning. I have suffered this same problem in my Japanese studies but I&amp;rsquo;ll leave that for another post.&lt;/p&gt;

&lt;h1 id=&#34;jazz:de178507b4348adcbad37d9ee5b5ae72&#34;&gt;Jazz&lt;/h1&gt;

&lt;p&gt;My background is classical piano, where I learnt enough in high school that a constant level of proficiency just sticks with me for the rest of my life. My interest in the past five years, however, has been jazz piano. I have had various teachers, learning methods and styles, but have never really seemed to stick. My poor sight reading ability coupled with my adult responsibilities (harhar) make it difficult to keep a steady practice routine going.&lt;/p&gt;

&lt;p&gt;I am about to embark on a new method, combining everything that I have attempted so far.&lt;/p&gt;

&lt;h1 id=&#34;synthesia:de178507b4348adcbad37d9ee5b5ae72&#34;&gt;Synthesia&lt;/h1&gt;

&lt;p&gt;The game &lt;a href=&#34;http://www.synthesiagame.com&#34;&gt;Synthesia&lt;/a&gt; is something that has been around for a long long time. I bought a license back in 2011 I think, and its still been going strong. I opened up the latest version just last night and it seems that it now supports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom hand splitting&lt;/li&gt;
&lt;li&gt;Looping&lt;/li&gt;
&lt;li&gt;Sweet sweet UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Definitely worth the price.&lt;/p&gt;

&lt;h2 id=&#34;finding-high-quality-midi:de178507b4348adcbad37d9ee5b5ae72&#34;&gt;Finding high quality MIDI&lt;/h2&gt;

&lt;p&gt;Most of the songs in Synthesia kind of suck to be honest. Not to mention irrelevant to jazz piano. Or classical piano. Or anything decent really. And I refuse to pay for lame-o Adele piano covers.&lt;/p&gt;

&lt;p&gt;So I went hunting around for decent jazz piano MIDI. It needs to ideally have backing tracks, quantized beats and split tracks for each hand. Its not easy. Here it is.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bushgrafts.com&#34;&gt;Douglas McKenzie&lt;/a&gt; (I bought his DVD!) is a great jazz pianist in Australia. He has a website with excellently formatted MIDI files. Its actually to time! And he even releases sheet music transcriptions of each of his solos. The MIDI files even have his annotations of each improvisation idea dammit! Its amazing.&lt;/p&gt;

&lt;p&gt;I am also lazy. So run the following code in the folder of your choice to download all the MIDI files on his page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -A mid -m -p -E -k -K -np http://www.bushgrafts.com/jazz/midi.htm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stage 2 (actually stage 999) will be to look at these &lt;a href=&#34;http://www.billevans.nl/midipage.htm&#34;&gt;Bill Evans transcriptions&lt;/a&gt;. Pull them thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -A mid -m -p -E -k -K -np http://www.billevans.nl/midipage.htm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-midi:de178507b4348adcbad37d9ee5b5ae72&#34;&gt;Using the MIDI&lt;/h2&gt;

&lt;p&gt;So just feed these into Synthesia, have a listen, play what you can, then check against the Synthesia falling notes, official sheet music or the generated ones from the game.&lt;/p&gt;

&lt;p&gt;Feed the MIDI output into a virtual MIDI device into Reaper, and listen to that &lt;a href=&#34;https://www.pianoteq.com/&#34;&gt;sweet sweet piano VST&lt;/a&gt; that you no doubt own.&lt;/p&gt;

&lt;p&gt;Practice the ear, export to MP3, run it through &lt;a href=&#34;http://www.seventhstring.com/&#34;&gt;Transcribe&lt;/a&gt; (or just slow it down through Synthesia)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Graviton</title>
      <link>http://nii236.github.io/technical-blog/post/2015-11-15-graviton/</link>
      <pubDate>Sun, 15 Nov 2015 16:18:08 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2015-11-15-graviton/</guid>
      <description>&lt;p&gt;I&amp;rsquo;d like to introduce Graviton in this post. Its a name I made up for my project mentioned in a previous post. There&amp;rsquo;s no real point to the name, except that it uses Electron plus Go. So I figured I&amp;rsquo;d choose a cool physics based name that starts with G.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll explain the basic steps in communicating between the front and back. In this case a &amp;ldquo;Hello World&amp;rdquo; should do the trick.&lt;/p&gt;

&lt;p&gt;So there are three parts to a graviton app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser front-end&lt;/li&gt;
&lt;li&gt;Node js glue-end&lt;/li&gt;
&lt;li&gt;Golang backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two parts are covered with Electron.js. And the backend is covered by Go, believe it or not.&lt;/p&gt;

&lt;p&gt;Connecting the front-end to the glue-end is done by Electron&amp;rsquo;s internal &lt;code&gt;ipc&lt;/code&gt; package. Its an event based system.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s send a &amp;ldquo;Hello from front-end&amp;rdquo; message from our front-end. I&amp;rsquo;m a react.js guy as well, so that&amp;rsquo;s what I&amp;rsquo;ll be using.&lt;/p&gt;

&lt;p&gt;Create a React component which has a button which calls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipc.send(&#39;SendHello&#39;, &#39;Front-end&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the glue-end, you&amp;rsquo;ll want a handler for this event, which basically just passes this onto the backend&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var client = new todoProto.Todo(&#39;localhost:3000&#39;, grpc.Credentials.createInsecure());

ipc.on(&#39;SendHello&#39;, function(event, arg) {
  client.sendHello({request: arg}, function(err, response) {
    if (err) { console.log(err); }
    event.sender.send(&#39;SendHelloResponse&#39;, response)
  });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The communication between the glue-end and the backend needs to be declared in a protobuf3 file. The glue-end will also handle the response which will be sent back over IPC to the front-end:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;

package Hello;

message SendHelloRequest {
  string request = 1;
}

message SendHelloResponse {
  string response = 1;
}

service Todo {
  rpc SendHello(SendHelloRequest) returns
  (SendHelloResponse);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to handle it in the backend:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type sendHelloServer struct{}

// AddTodoService implements pb.AddTodoServer
func (s sendHelloServer) SendHello(ctx context.Context, in *pb.SendHelloRequest) (*pb.SendHelloResponse, error) {
	return &amp;amp;pb.SendHelloResponse{Response: &amp;quot;Hello&amp;quot; + in.Request}, nil
}

func main() {
  port := os.Getenv(&amp;quot;PORT&amp;quot;)
	host := os.Getenv(&amp;quot;HOST&amp;quot;)

	if len(port) == 0 {
		port = &amp;quot;3000&amp;quot;
	}

	if len(host) == 0 {
		host = &amp;quot;localhost&amp;quot;
	}

	lis, err := net.Listen(&amp;quot;tcp&amp;quot;, host+&amp;quot;:&amp;quot;+port)
	if err != nil {
		log.Fatalf(&amp;quot;failed to listen: %v&amp;quot;, err)
	}
	s := grpc.NewServer()
	pb.RegisterSendHelloServer(s, &amp;amp;sendHelloServer{})
	s.Serve(lis)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response from the Go backend is now sent to your node.js glue-end which will forward it to the front-end. Now handle the response over in your front-end:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipc.on(&#39;SendHelloResponse&#39;, (arg) =&amp;gt; {
  console.log(arg);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see &amp;ldquo;Hello Front-end&amp;rdquo; in your Electron&amp;rsquo;s console everytime you click the button! Amazing!&lt;/p&gt;

&lt;p&gt;I imagine you&amp;rsquo;re thinking something like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Goddamn that was a LOT of effort for a Hello World&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure it was. But now you have a cool framework for your Go app! You are Hello World-ing across three different layers! Its a self contained, cross platform, multi-language, HTTP2 streaming enabled microservice!&lt;/p&gt;

&lt;p&gt;The connection between the presentation layer and the backend is handled in Protobuf/gRPC format. Communication is very efficient compared to JSON, uses HTTP/2 and supports streaming, duplex communication and other cool things that I have only begun to explore.&lt;/p&gt;

&lt;p&gt;I would like to imagine that with all this setup you have a scalable system with which you can create cool apps like PopcornTime, Atom and others, except now you can do it with Go.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s pretty damn cool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Life on the Dark Side</title>
      <link>http://nii236.github.io/technical-blog/post/2015-11-15-lifeAtTFG/</link>
      <pubDate>Sun, 15 Nov 2015 16:05:24 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2015-11-15-lifeAtTFG/</guid>
      <description>&lt;p&gt;So there I was.&lt;/p&gt;

&lt;p&gt;I joked that programming is like the dark side of career paths. Its tempting to do because it looks fun from the outside. It would have been a nice change from pushing paper and excel spreadsheets to vendors about why X does not adhere to standard Y. To be able to go to &amp;lsquo;work&amp;rsquo;, and that &amp;lsquo;work&amp;rsquo; means somewhere near civilisation. The concept is amazingly tempting, yet fraught with risk.&lt;/p&gt;

&lt;p&gt;As I write this, I&amp;rsquo;ve been working at TFG for the past 9 months! I have various things to say but my work here has been very fruitful.&lt;/p&gt;

&lt;p&gt;The majority of my time has been spent looking at the data analytics work that I was originally signed up to do. During slower times, however, I have been encouraged to help out with the others in developing web apps just like I hoped!&lt;/p&gt;

&lt;p&gt;I have one current project in production, and another still in staging. I&amp;rsquo;ve had experience in the following technologies, languages and frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d3.js&lt;/li&gt;
&lt;li&gt;react.js&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;koa.js&lt;/li&gt;
&lt;li&gt;Ruby on Rails&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;RabbitMQ&lt;/li&gt;
&lt;li&gt;Protobuf&lt;/li&gt;
&lt;li&gt;Microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve had to pick up a smattering of things, not limited to databases, ORMs, Continuous Integration tools or deployment tools.&lt;/p&gt;

&lt;p&gt;In my spare time I&amp;rsquo;ve continued to learn at a fast pace and have touched on the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Electron.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Blockchains&lt;/li&gt;
&lt;li&gt;Go/Golang&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve even helped drive change in the stack that is used! React.js and webpack specifically. Before it was browserify and react-rails/coffeescript, but obsessive tendency to stay on the cutting edge and research the latest and greatest tooling has managed to see us enter a new era for javascript.&lt;/p&gt;

&lt;p&gt;I like to think that it is currently the &amp;lsquo;golden age&amp;rsquo; for javascript, mostly because of node as I&amp;rsquo;m sure you&amp;rsquo;re aware of. I&amp;rsquo;m glad to be in the industry now, and not 5 or 10 years ago where you&amp;rsquo;d be hacking away with LAMP and jquery. Or Silverlight. Or Java applets.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the story so far anyway. I&amp;rsquo;ll update this every now and then to see my present thoughts at the time regarding my career change choice. But for now I am still optimistic and hopeful. At this point I feel that the future will continue to see me learn new things, be challenged and do things that I actually want to do.&lt;/p&gt;

&lt;p&gt;Finance notwithstanding of course. I&amp;rsquo;m about to lock in a large mortgage so I have been feeling the urge to return to engineering for the extra money. Let&amp;rsquo;s not hope it comes to that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>npm install mad-skillz</title>
      <link>http://nii236.github.io/technical-blog/post/2015-11-15-jobprep/</link>
      <pubDate>Sun, 15 Nov 2015 11:06:25 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2015-11-15-jobprep/</guid>
      <description>&lt;p&gt;So I started considering a job in software development around October 2014. All I had with me were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First year computer science&lt;/li&gt;
&lt;li&gt;Mechatronics engineering (MATLAB and similar)&lt;/li&gt;
&lt;li&gt;Two years of PLC/SCADA/Cicode programming&lt;/li&gt;
&lt;li&gt;9 months of being stuck on site and poking around with Linux, VPNs, vim, bash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not too bad considering.&lt;/p&gt;

&lt;p&gt;I have a extremely large appetite for self learning and research if something interests me enough, so for the next few months I applied for various software roles, while self learning. Codecademy, The Odin Project, The Rails Tutorial were part of it.&lt;/p&gt;

&lt;p&gt;At the same time, applying to more control systems jobs was my other fulltime job. You know, in addition to my existing fulltime job of trying to be a software developer.&lt;/p&gt;

&lt;p&gt;I suppose I lucked out in the end. I managed to score a role at &lt;a href=&#34;http://www.thefrontiergroup.com.au&#34;&gt;The Frontier Group&lt;/a&gt;! At the end of the day, it was not my feeble attempts to learn software development that got me the role, it was a combination of the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The drive to learn something new&lt;/li&gt;
&lt;li&gt;The initiative to switch careers&lt;/li&gt;
&lt;li&gt;The ability to fit into the company culture&lt;/li&gt;
&lt;li&gt;My existing knowledge in mining and engineering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The actual role was not a development role unfortunately. I was employed as an &amp;lsquo;analyst developer&amp;rsquo;, which focuses on data analytics for various clients (usually mining). TFG is, however, mainly a web development company, and I hoped by just being I would have the opportunity to learn skills that I needed to be able to hold my own in this new industry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rake career:migrate</title>
      <link>http://nii236.github.io/technical-blog/post/2015-11-08-migration/</link>
      <pubDate>Sun, 08 Nov 2015 11:15:27 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2015-11-08-migration/</guid>
      <description>&lt;p&gt;I often see people posting on the &lt;a href=&#34;http://www.reddit.com/r/cscareerquestions&#34;&gt;/r/cscareerquestions&lt;/a&gt; subreddit questions about what is involved in migrating to a career of software development. I&amp;rsquo;m in the enviable position of having completed that step, and I&amp;rsquo;ll share my background in this article and will cover my migration to software development in a future post.&lt;/p&gt;

&lt;p&gt;I graduated in 2008 with an Engineering bachelor&amp;rsquo;s degree in Mechatronics. I enjoyed the work, and the combination of electronic, mechanical and programming was appealing to me.&lt;/p&gt;

&lt;p&gt;I ended up working as a vanilla mechanical engineer due to the job market at the time. I did it for 3 years, during which I worked on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Piping&lt;/li&gt;
&lt;li&gt;Estimating&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Construction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amongst other things.&lt;/p&gt;

&lt;p&gt;Deep down I wasn&amp;rsquo;t getting the enjoyment I wanted out of it, mostly because there was nothing technologically oriented in my work. I made sure pipes were being delivered, I made sure mechanical steelwork was in the right place at the right time.&lt;/p&gt;

&lt;p&gt;I switched to control systems engineering after 3 years. This was already a big career change and I had to start from the bottom again as a graduate. Working in control systems/process controls was amazing, and much much closer to my original vision of mechtronic engineering. I was working on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programmable Logic Controllers (PLC)&lt;/li&gt;
&lt;li&gt;CitectSCADA (HMI design and software)&lt;/li&gt;
&lt;li&gt;Interfacing with vendor systems&lt;/li&gt;
&lt;li&gt;Server setup&lt;/li&gt;
&lt;li&gt;Cisco switch setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far so good! I was working with computers, I was working on industrial machinery, I was doing something I was actually good at.&lt;/p&gt;

&lt;p&gt;One of the disadvantages of working in the mining industry is that you need to be away from home for long periods of time. During my six years of my time in the mining industry, I was probably away for three of those. The last site gig I had required me to be away for an entire year, for 3 months at a time. In the middle of a jungle in Ghana, West Africa. It was a unique experience, but not one that I was willing to repeat.&lt;/p&gt;

&lt;p&gt;After a couple of years, I eventually got laid off from my (2nd) gig as a control systems engineer. Looking for further work posed a few problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t have much control systems experience (I was still a &amp;lsquo;graduate&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;The job market was dying (dead?)&lt;/li&gt;
&lt;li&gt;What work was available, usually required being underpaid, sent to site, or shoved into a niche market such as vendor auditing stacker anti collision logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I laid in bed after three months of job hunting, my girlfriend just said to me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You&amp;rsquo;re spending all your time tinkering around with computers. Why don&amp;rsquo;t you look for work in software development?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That got me thinking&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Square peg into a square hole</title>
      <link>http://nii236.github.io/technical-blog/post/2015-11-06-electron/</link>
      <pubDate>Fri, 06 Nov 2015 16:55:21 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2015-11-06-electron/</guid>
      <description>

&lt;h1 id=&#34;go:4ac2213767fecde39d5307d2b39a54d3&#34;&gt;Go&lt;/h1&gt;

&lt;p&gt;My friends know me as someone who is not very loyal. I don&amp;rsquo;t mean to my girlfriend. I mean to various technology and web stacks. Ever since the advent of node.js, frameworks, tooling and just weird stacks have popped up. Not that I&amp;rsquo;m complaining. I love reading about new frameworks, languages and development in general.&lt;/p&gt;

&lt;p&gt;My current interest is in &lt;a href=&#34;golang.org&#34;&gt;Go&lt;/a&gt;, or &lt;a href=&#34;golang.org&#34;&gt;Golang&lt;/a&gt;. I won&amp;rsquo;t bother introducing it here, as I&amp;rsquo;ll just be repeating what others have said.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been really interested in the language lately, and I look forward to building apps with it. One of the main limitations of Go at the moment is the lack of a proper UI library. There are some bindings to GTK/QT somewhere, but usually filled with bugs or some weird hackery.&lt;/p&gt;

&lt;h1 id=&#34;electron:4ac2213767fecde39d5307d2b39a54d3&#34;&gt;Electron&lt;/h1&gt;

&lt;p&gt;I have also been looking into &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; lately. It used to be known as Atom Shell and has been rebranded recently.&lt;/p&gt;

&lt;p&gt;Electron allows people who are more experienced in Single Page App (SPA) style development to build apps for desktops. All signs point towards web apps as the future, but yet here is Electron and Atom enjoying success and adoption. It helps us lowly web developers to get our feet wet in desktop development.&lt;/p&gt;

&lt;p&gt;A quick read of Electron documentation suggests that it runs off a basic node.js server as the &lt;code&gt;main process&lt;/code&gt;. There are also many &lt;code&gt;renderer processes&lt;/code&gt; that can be spawned, and these will be your browser instances that will be presented to the end user.&lt;/p&gt;

&lt;p&gt;Communication between the main and renderer processes are done by way of the ipc package that comes with Electron. So I&amp;rsquo;d imagine your main process handles most of the comms, state, and processing. One of the biggest complaints about node js is that when it blocks, it &lt;em&gt;really, really&lt;/em&gt; blocks. Single threaded execution means that as soon as you do some sort of heavy number crunching you&amp;rsquo;re screwed, and then everyone will start complaining about how your &lt;a href=&#34;http://atom.io/&#34;&gt;app&lt;/a&gt; is slow as molasses.&lt;/p&gt;

&lt;h1 id=&#34;multi-tier-architecture:4ac2213767fecde39d5307d2b39a54d3&#34;&gt;Multi tier architecture&lt;/h1&gt;

&lt;p&gt;So why not defer the processing intensive stuff to yet another process? Perhaps using another language that is well suited to portability (static binaries) and performance.&lt;/p&gt;

&lt;p&gt;There is something called &lt;a href=&#34;https://en.wikipedia.org/wiki/Multitier_architecture&#34;&gt;multitier architecture&lt;/a&gt; that allows one to split up these concerns cleanly.&lt;/p&gt;

&lt;p&gt;I have explored connecting a Go backend into Electron and have found reasonable success. The first iteration used a REST API, and my second attempt covers using gRPC instead, to great effect. I may have solved two problems in two different camps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Performance by the main process in Electron&lt;/li&gt;
&lt;li&gt;A UI toolkit for Go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ll continue these musings in part two.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First post!</title>
      <link>http://nii236.github.io/technical-blog/post/2015-09-18-first/</link>
      <pubDate>Fri, 18 Sep 2015 14:21:40 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/post/2015-09-18-first/</guid>
      <description>

&lt;h1 id=&#34;why-hello-there:1d9669256c93acec50a9b097192d7f8d&#34;&gt;Why hello there!&lt;/h1&gt;

&lt;p&gt;This is the initial post. I&amp;rsquo;ll be exploring various technology stacks during my journey to become a (more) competent developer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://nii236.github.io/technical-blog/about/</link>
      <pubDate>Thu, 17 Sep 2015 09:07:19 +0800</pubDate>
      
      <guid>http://nii236.github.io/technical-blog/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m an ex-control systems/automation engineer. I’ve been working in the mining industry for 6 years before switching to software development.&lt;/p&gt;

&lt;p&gt;During my engineering career I have spent about 3 years on mine sites, from Boddington to South Australia. I even spent nine months in Ghana, West Africa! A lot of my work involved switch configuration, PLC and SCADA programming, fault finding, code debugging, breakdown support and field testing.&lt;/p&gt;

&lt;p&gt;After my short career in engineering I started to have thoughts about finding work that lets me live close to civilisation. That coupled with my main engineering path already leaning towards tech, and the fact that in my spare time my hobbies were basically software development, I figured that this industry was the way to go.&lt;/p&gt;

&lt;p&gt;I find self motivation is the biggest factor in learning something. I have had a recent interest in cryptocurrencies, Bitcoin in particular. This is what has been driving my desire to learn more about software development. I wrote a few trading bots in Python and have recently written a blog post covering how to use graph databases to see trends in the blockchain.&lt;/p&gt;

&lt;p&gt;I am currently working full-time as an analyst developer at The Frontier Group. My work involves data visualisations and writing extensions to TIBCO&amp;rsquo;s Spotfire platform using C# and D3.js.&lt;/p&gt;

&lt;p&gt;My current interests revolve around data science, data visualisations and cryptocurrencies.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>